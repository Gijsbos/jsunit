let is_literal_object=a=>a&&a.constructor&&"object"===a.constructor.name.toLowerCase(),is_class_object=a=>a&&!Array.isArray(a)&&a.constructor&&"object"!==a.constructor.name.toLowerCase();function array_has_values(a,b){for(let c=0;c<b.length;c++)if(!a.includes(b[c]))return!1;return!0}let array_equals=(a,b)=>array_has_values(a,b)&&array_has_values(b,a);function gettype(a){if(a===void 0)return"undefined";if(null===a)return"null";if("number"==typeof a)return new RegExp(/^[-]?(?:[0-9]*[,.]{1}[0-9]*)$/g).test(a)?"float":"int";if("boolean"==typeof a)return"boolean";if("function"==typeof a)return"function";if(Array.isArray(a))return"array";if("object"==typeof a){if(is_literal_object(a))return"literal";if(is_class_object(a))return`Object<${a.constructor.name}>`;throw new Exception(`gettype failed, unknown object type ${a}`)}else{if("string"==typeof a)return"string";throw new Exception(`gettype failed, unknown input type ${typeof a}`)}}function is_object_type(a){let b=/object<([a-z0-9_]+)>/gi.exec(a);return null!==b&&b[1]}class JSUnitTestException{constructor(a,b,c){this.methodName=a,this.message=b,this.data=c}getMethodName(){return this.methodName}getMessage(){return this.message}getData(){return this.data}}class JSTestResult{constructor(a,b,c=!0,d,e){this.className=a,this.methodName=b,this.success=c,this.message=d?d:null,this.data=e?e:null}}class JSUnitTest{constructor(){this.THROW_EXCEPTION_ON_FAILURE=!1,this.PASS_ON_RUNNER_EXCEPTIONS=!1,this.objectReferences=[],this.expectExceptions=[],this.currentTestName=null,this.assertions=[],this.results=[]}getLineInfo(){try{throw new Error}catch(b){var a=b.stack;if(!0===/firefox/gi.test(navigator.userAgent)){let b=`${this.currentTestName}`,c=a.indexOf(b);if(0<c){let b=a.indexOf("\n",c);return a.substr(0,b).split("\n").pop().trim().split("@")[1].trim()}}else if(!0===/chrome/gi.test(navigator.userAgent)){let b=`${this.constructor.name}.${this.currentTestName}`,c=a.indexOf(b);if(0<c){let b=a.indexOf("\n",c),d=a.substr(0,b).split("\n").pop().trim();return /\((.+)\)/g.exec(d)[1]}}return null}}addAssertion(){let a=`${this.constructor.name}.${this.currentTestName}`;this.assertions.includes(a)||this.assertions.push(a)}hasAssertion(a){return this.assertions.includes(`${this.constructor.name}.${a}`)}hasResult(a){for(let b=0;b<this.results.length;b++)if(this.results[b].methodName==a)return!0;return!1}setFailedResult(a,b,c=!1){let d=this.getLineInfo();var a=d?`${a} at line ${d}`:a;if(c||this.THROW_EXCEPTION_ON_FAILURE)throw new JSUnitTestException(this.currentTestName,a,b);return!this.hasResult(this.currentTestName)&&void this.results.push(new JSTestResult(this.constructor.name,this.currentTestName,!1,a,b))}setSuccess(){return!this.hasResult(this.currentTestName)&&void this.results.push(new JSTestResult(this.constructor.name,this.currentTestName,!0))}setSkipped(){return!this.hasResult(this.currentTestName)&&void this.results.push(new JSTestResult(this.constructor.name,this.currentTestName,null))}handleReceivedException(a,b){let c=null;for(let d=0;d<this.expectExceptions.length;d++)this.expectExceptions[d][0]==a&&(c=this.expectExceptions[d][1]);if(null===c)throw b;else b.constructor.name===c?this.setSuccess():this.setFailedResult(a,`Failed asserting that '${this.constructor.name}.${a}' throws an exception of type ${c}`);return null!==c}shouldHaveThrownException(a){let b=null;for(let c=0;c<this.expectExceptions.length;c++)this.expectExceptions[c][0]==a&&(b=this.expectExceptions[c][1]);null!==b&&this.setFailedResult(a,`Failed asserting that '${this.constructor.name}.${a}' throws an exception of type ${b}`)}expectException(a){this.addAssertion(),this.expectExceptions.push([this.currentTestName,"object"==typeof a?a.constructor.name:a])}assertTrue(a){this.addAssertion(),!0===a?this.setSuccess():this.setFailedResult(`Failed asserting that '${this.constructor.name}.${this.currentTestName}' is true`)}assertFalse(a){this.addAssertion(),!0===a?this.setFailedResult(`Failed asserting that '${this.constructor.name}.${this.currentTestName}' is false`):this.setSuccess()}assertEmpty(a){this.addAssertion(),a===void 0||null===a?this.setSuccess():this.setFailedResult(`Failed asserting that '${this.constructor.name}.${this.currentTestName}' is empty (undefined|null)`)}assertUndefined(a){this.addAssertion(),a===void 0?this.setSuccess():this.setFailedResult(`Failed asserting that '${this.constructor.name}.${this.currentTestName}' is undefined`)}assertNull(a){this.addAssertion(),null===a?this.setSuccess():this.setFailedResult(`Failed asserting that '${this.constructor.name}.${this.currentTestName}' is null`)}addAssertEqualsObjectDiffText(a,b){return[...`${a}`.split("\r"),...b]}indents(a){return"\t".repeat(a)}objectToString(a,b,c,d=!1){let e=[];for(const f in a)!1===(d&&("null"==a[f]||null==a[f]))&&e.push(`${this.indents(c+1)}- [${f}] => ${a[f]}\n`);return[`${this.indents(c)}${b} (\n`,...e,`${this.indents(c)})\n`]}getObjectChange(a,b,c){let d=[];for(const e in a)if(b[e]!==void 0){let f=gettype(a[e]),g=gettype(b[e]);if(f!==g)d.push(`${this.indents(c+1)}- [${e}] => ${a[e]}\n`),d.push(`${this.indents(c+1)}+ [${e}] => ${b[e]}\n`);else switch(!0){case!1!==is_object_type(f):if(a[e]===b[e])continue;let g=is_object_type(f),h=this.compareObject(a[e],b[e],g,c+3);2<h.length&&(d.push(`${this.indents(c+1)}- [${e}] => \n`),d=[...d,...this.objectToString(a[e],g,c+3)],d.push(`${this.indents(c+1)}+ [${e}] => \n`),d=[...d,...h]);break;case"literal"==f:if(a[e]===b[e])continue;let i="Literal",j=this.compareObject(a[e],b[e],i,c+3);2<j.length&&(d.push(`${this.indents(c+1)}- [${e}] => \n`),d=[...d,...this.objectToString(a[e],i,c+3)],d.push(`${this.indents(c+1)}+ [${e}] => \n`),d=[...d,...j]);break;case"array"==f:let k="Array",l=this.compareObject(this.convertArrayToObject(a[e]),this.convertArrayToObject(b[e]),k,c+3);2<l.length&&(d.push(`${this.indents(c+1)}- [${e}] => \n`),d=[...d,...this.objectToString(a[e],k,c+3)],d.push(`${this.indents(c+1)}+ [${e}] => \n`),d=[...d,...l]);break;default:a[e]!==b[e]&&(d.push(`${this.indents(c+1)}- [${e}] => ${a[e]}\n`),d.push(`${this.indents(c+1)}+ [${e}] => ${b[e]}\n`));}}else void 0===b[e]&&void 0!==a[e]&&d.push(`${this.indents(c+1)}- [${e}] => ${a[e]}\n`);for(const e in b)void 0===a[e]&&void 0!==b[e]&&d.push(`${this.indents(c+1)}+ [${e}] => ${b[e]}\n`);return d}convertArrayToObject(a){let b={};for(let c=0;c<a.length;c++)b[c]=a[c];return b}compareArray(a,b,c=0){a=this.convertArrayToObject(a),b=this.convertArrayToObject(b);let d=[`${this.indents(c)}Array (\n`,...this.getObjectChange(a,b,c),`${this.indents(c)})\n`];return!(2<d.length)||d}compareLiteral(a,b,c=0){let d=[`${this.indents(c)}Literal (\n`,...this.getObjectChange(a,b,c),`${this.indents(c)})\n`];return!(2<d.length)||d}compareObject(a,b,c,d=0){if(!this.objectReferences.includes(a))this.objectReferences.push(a);else return this.objectToString(a,c,d);if(!this.objectReferences.includes(b))this.objectReferences.push(b);else return this.objectToString(b,c,d);let e=[`${this.indents(d)}${c} (\n`,...this.getObjectChange(a,b,d),`${this.indents(d)})\n`];return!(2<e.length)||e}assertEquals(a,b,c=!1){if(this.addAssertion(),a===b)return this.setSuccess();let d=gettype(a),e=gettype(b);if(d!==e)return this.setFailedResult(`Failed asserting that '${b}' equals '${a}'`,null,c);let f=null;switch(!0){case"float"==e:if(a!=b)return this.setFailedResult(`Failed asserting that actual (float) '${b}' equals expected (float) '${a}'`,null,c);break;case"int"==e:if(a!=b)return this.setFailedResult(`Failed asserting that actual (int) '${b}' equals expected (int) '${a}'`,null,c);break;case"boolean"==e:if(a!=b)return this.setFailedResult(`Failed asserting that actual (boolean) '${b}' equals expected (boolean) '${a}'`,null,c);break;case"function"==e:if(a!=b)return this.setFailedResult(`Failed asserting that actual (function) '${b}' equals expected (function) '${a}'`,null,c);break;case"string"==e:if(a!=b)return this.setFailedResult(`Failed asserting that actual (string) '${b}' equals expected (string) '${a}'`,null,c);break;case"array"==e:let d=this.compareArray(a,b);if(!0!==d)return d=this.addAssertEqualsObjectDiffText(`Failed asserting that two arrays are equal.\n\r--- Expected.\n\r+++ Actual.\n`,d),this.setFailedResult("Assertion failed",d,c);break;case"literal"==e:let g=this.compareLiteral(a,b);if(!0!==g)return g=this.addAssertEqualsObjectDiffText(`Failed asserting that two literal objects are equal.\n\r--- Expected.\n\r+++ Actual.\n`,g),this.setFailedResult("Assertion failed",g,c);break;case!1!==(f=is_object_type(e)):let h=this.compareObject(a,b,f);if(!0!==h)return h=this.addAssertEqualsObjectDiffText(`Failed asserting that two objects are equal.\n\r--- Expected.\n\r+++ Actual.\n`,h),this.setFailedResult("Assertion failed",h,c);break;default:if(a!=b)return this.setFailedResult(`actual (unknown) '${b}' does not meet expected (unknown) '${a}'`,null,c);}this.currentTestName&&this.setSuccess()}assertNotEquals(a,b){this.addAssertion();var c=null;try{this.assertEquals(a,b,!0)}catch(a){if(c=a,!a instanceof JSUnitTestException)throw a}null===c?(this.results.pop(),this.setFailedResult(`Failed asserting that '${b}' is not equal to '${a}'`)):this.setSuccess()}}class JSUnitTestRunner{constructor(){this.LOG_BREAK_AFTER_TESTS=50,this.SHOW_TEST_START_END=!1,this.version="1.0",this.runnerClass=null,this.testClasses=[],this.log="",this.logStyles=[],this.assertions=[],this.results=[],this.success=0,this.failures=0,this.skipped=0}addTest(a){this.testClasses.push(a)}async createTestsArray(a){return new Promise(b=>{let c=[];Object.getOwnPropertyNames(a.__proto__).forEach(b=>{/^test/g.test(b)&&c.push([a,a[b]])}),b(c)})}async runSetUpBeforeClass(a){return new Promise(async(b)=>{a.setUpBeforeClass&&(await a.setUpBeforeClass()),b()})}async runTearDownAfterClass(a){return new Promise(async(b)=>{a.tearDownAfterClass&&a.tearDownAfterClass(),b()})}async runSetUp(a){return new Promise(async(b)=>{a.setUp&&(await a.setUp()),b()})}async runTearDown(a){return new Promise(async(b)=>{a.tearDown&&(await a.tearDown()),b()})}isAsyncMethod(a){const b=(async()=>{}).constructor;return!0==a instanceof b}async runTests(a){return new Promise(async(b)=>{let c=a.shift();if(c){let e=c[0],f=c[1],g=f.name;if(this.isAsyncMethod(f)){this.SHOW_TEST_START_END&&console.log(`Start\t${g}`),await this.runSetUp(e),e.currentTestName=g;var d=!1;try{await e[g]()}catch(a){if(e.PASS_ON_RUNNER_EXCEPTIONS)throw a;d=e.handleReceivedException(g,a)}e.hasAssertion(g)||e.setSkipped(g),!1===d&&e.shouldHaveThrownException(g),this.SHOW_TEST_START_END&&console.log(`End\t\t${g}`),e.currentTestName=null,await this.runTearDown(e),await this.runTests(a),b(!0)}else{this.SHOW_TEST_START_END&&console.log(`Start\t${g}`),await this.runSetUp(e),e.currentTestName=g;var d=!1;try{e[g]()}catch(a){if(e.PASS_ON_RUNNER_EXCEPTIONS)throw a;d=e.handleReceivedException(g,a)}e.hasAssertion(g)||e.setSkipped(g),!1===d&&e.shouldHaveThrownException(g),this.SHOW_TEST_START_END&&console.log(`End\t\t${g}`),e.currentTestName=null,await this.runTearDown(e),await this.runTests(a),b(!0)}}else b("done")})}async runTestClasses(){return new Promise(async(a)=>{let b=this.testClasses.shift();if(b){let c=await this.createTestsArray(b);await this.runSetUpBeforeClass(b),await this.runTests(c),await this.runTearDownAfterClass(b),this.runTestClasses().then(()=>{this.results=[...this.results,...b.results],this.assertions=[...this.assertions,...b.assertions],a("done")})}else a("done")})}getUserAgent(){return navigator.userAgent.replaceAll(")",")\n").split("\n").map((a,b)=>`${0==b?"\t".repeat(0):"\t".repeat(3)}${a.trim()}`).join("\n")}showJSUnitInfo(){console.log(`%c\n JSUnit ${this.version} by Gijs Bos and contributors. \n\n Runtime:\t${this.getUserAgent()} \n`,"line-height: 1.1rem")}addLog(a,b="background: white; color: black; font-weight: normal"){this.log+=0==this.logStyles.length%JSUnitTestRunner.LOG_BREAK_AFTER_TESTS&&0!==this.logStyles.length?`%c${a}\n`:`%c${a}`,this.logStyles.push(b)}printLog(){console.log(this.log,...this.logStyles)}printResults(){this.results.forEach(a=>{a.success?(this.success+=1,this.addLog(".")):null===a.success?(this.skipped+=1,this.addLog(`R`,"background: #e5e510; color: black; font-weight: bolder")):(this.failures+=1,this.addLog("F","background: #ff1616; color: white; font-weight: bolder"))}),this.printLog(),this.results.forEach(a=>{a.success||(a.data&&"array"==gettype(a.data)&&console.log(...a.data),a.message&&console.log(`${a.message}`))})}async startRunner(){this.showJSUnitInfo();let a=new Date().getTime();await this.runTestClasses(),this.printResults();let b=new Date().getTime(),c=new Date().setTime(b-a);console.log(`Time: ${c} ms`),this.success===this.results.length?console.log(`%c OK (${this.results.length} ${1===this.results.length?"test":"tests"}, ${this.assertions.length} ${1===this.assertions.length?"assertion":"assertions"}) `,"line-height: 1.1rem; background: #0dbc79; color: black; font-weight: bolder"):0<this.failures?console.log(`%c FAILURES! \n Tests: ${this.results.length}, Assertions: ${this.assertions.length}, Failures: ${this.failures} `,"line-height: 1.1rem; background: #ff1616; color: white; font-weight: bolder"):console.log(`%c OK, but incomplete, skipped, or risky tests! \n Tests: ${this.results.length}, Assertions: ${this.assertions.length}) `,"line-height: 1.1rem; background: #e5e510; color: black; font-weight: bolder")}static runner(a){JSUnitTestRunner.runnerClass=new JSUnitTestRunner,a(JSUnitTestRunner.runnerClass),JSUnitTestRunner.run=(a=!1)=>{JSUnitTestRunner.runnerClass.verbose=a,JSUnitTestRunner.runnerClass.startRunner()}}}